tax_no_donation
calculate_tax(annual_income - standard_deduction)
library(data.table)
library(tidyverse)
library(ggthemes)
# Define tax brackets and rates for single filers
brackets <- c(11000, 44725, 95375, 182100, 231250, 578125)
rates <- c(0.10, 0.12, 0.22, 0.24, .32, .35)
# Function to calculate tax based on taxable income
calculate_tax <- function(income) {
tax <- 0
for (i in seq_along(brackets)) {
if (income > brackets[i]) {
tax <- tax + (brackets[i] - ifelse(i == 1, 0, brackets[i-1])) * rates[i]
} else {
tax <- tax + (income - ifelse(i == 1, 0, brackets[i-1])) * rates[i]
break
}
}
return(tax)
}
# calculate_tax(100000)
# Calculate lifetime tax burden
annual_income <- 100000
donation_per_year <- 0.10 * annual_income
standard_deduction <- 12950
# calculate_tax(annual_income - standard_deduction)
# 1. Tax without any donations
tax_no_donation <- calculate_tax(annual_income)
# 2. Tax with annual donations
tax_with_annual_donation <- calculate_tax(annual_income - donation_per_year)
# ...
# ...
calc_lifetime_tax_by_bunch <- function(bunch, salary, donation_frac) {
lifetime_years <- 40
total_taxes_paid <- 0
# total_years_passed <- 0
money_saved <- 0
for (i in 1:lifetime_years) {
if (i %% bunch == 0) {
# print(i)
# donating year
money_saved <- money_saved + donation_frac * salary
total_taxes_paid <- total_taxes_paid + calculate_tax(salary - max(money_saved, standard_deduction))
money_saved <- 0
} else {
# saving year
money_saved <- money_saved + donation_frac * salary
total_taxes_paid <- total_taxes_paid + calculate_tax(salary - standard_deduction)
}
}
return(total_taxes_paid)
}
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, .5e5), donation_frac = seq(.05, .2, .05))
full_results <- pmap_dbl(full_options, calc_lifetime_tax_by_bunch)
result_dt <- copy(full_options)
result_dt[, taxes_paid := full_results]
result_dt[, min_taxes := min(taxes_paid), .(salary, donation_frac)]
result_dt[, optimal := min_taxes == taxes_paid]
result_dt[optimal == T]
# target_donation <- .1
result_dt[donation_frac == .2 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .1 & salary == 1e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .1 & salary == 1e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .1 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .2 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .15 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .15 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt
result_dt[donation_frac == .15 & salary == 3e5]
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, .5e5), donation_frac = seq(.05, .2, .05))
full_results <- pmap_dbl(full_options, calc_lifetime_tax_by_bunch)
result_dt <- copy(full_options)
result_dt[, taxes_paid := full_results]
result_dt[, min_taxes := min(taxes_paid), .(salary, donation_frac)]
result_dt[, optimal := min_taxes == taxes_paid]
result_dt[optimal == T]
result_dt[donation_frac == .15 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .1 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .1 & salary == 2.5e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .2 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .2 & salary == 3e5]
.2 * 300000
result_dt[donation_frac == .2 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
ggsave("300k20percent.png",
width = 6,
height = 3)
result_dt[donation_frac == .1 & salary == 1e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $100k\nYears earning = 40\nDonation = 10%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
ggsave("100k10percent.png",
width = 6,
height = 3)
result_dt[donation_frac == .1 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
ggsave("300k10percent.png",
width = 6,
height = 3)
result_dt[donation_frac == .1 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
result_dt[donation_frac == .1 & salary == 1e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $100k\nYears earning = 40\nDonation = 10%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
library(data.table)
library(tidyverse)
library(ggthemes)
# Define tax brackets and rates for single filers
brackets <- c(11000, 44725, 95375, 182100, 231250, 578125)
rates <- c(0.10, 0.12, 0.22, 0.24, .32, .35)
# Function to calculate tax based on taxable income
calculate_tax <- function(income) {
tax <- 0
for (i in seq_along(brackets)) {
if (income > brackets[i]) {
tax <- tax + (brackets[i] - ifelse(i == 1, 0, brackets[i-1])) * rates[i]
} else {
tax <- tax + (income - ifelse(i == 1, 0, brackets[i-1])) * rates[i]
break
}
}
return(tax)
}
# calculate_tax(100000)
# Calculate lifetime tax burden
annual_income <- 100000
donation_per_year <- 0.10 * annual_income
standard_deduction <- 12950
# calculate_tax(annual_income - standard_deduction)
# 1. Tax without any donations
tax_no_donation <- calculate_tax(annual_income)
# 2. Tax with annual donations
tax_with_annual_donation <- calculate_tax(annual_income - donation_per_year)
# ...
# ...
calc_lifetime_tax_by_bunch <- function(bunch, salary, donation_frac) {
lifetime_years <- 40
total_taxes_paid <- 0
# total_years_passed <- 0
money_saved <- 0
for (i in 1:lifetime_years) {
if ((i %% bunch == 0) | (i == lifetime_years)) {
# print(i)
# donating year
money_saved <- money_saved + donation_frac * salary
total_taxes_paid <- total_taxes_paid + calculate_tax(salary - max(money_saved, standard_deduction))
money_saved <- 0
} else {
# saving year
money_saved <- money_saved + donation_frac * salary
total_taxes_paid <- total_taxes_paid + calculate_tax(salary - standard_deduction)
}
}
return(total_taxes_paid)
}
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, .5e5), donation_frac = seq(.05, .2, .05))
full_results <- pmap_dbl(full_options, calc_lifetime_tax_by_bunch)
result_dt <- copy(full_options)
result_dt[, taxes_paid := full_results]
result_dt[, min_taxes := min(taxes_paid), .(salary, donation_frac)]
result_dt[, optimal := min_taxes == taxes_paid]
result_dt[optimal == T]
# target_donation <- .1
result_dt[donation_frac == .1 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 20%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
ggsave("300k10percent.png",
width = 6,
height = 3)
result_dt[donation_frac == .1 & salary == 1e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $100k\nYears earning = 40\nDonation = 10%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
ggsave("100k10percent.png",
width = 6,
height = 3)
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, 1e4), donation_frac = seq(.05, .2, .05))
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, 1e4), donation_frac = seq(.05, .3, .05))
full_results <- pmap_dbl(full_options, calc_lifetime_tax_by_bunch)
full_results
result_dt <- copy(full_options)
result_dt[, taxes_paid := full_results]
result_dt[, min_taxes := min(taxes_paid), .(salary, donation_frac)]
result_dt[, optimal := min_taxes == taxes_paid]
result_dt[, optimal := as.numeric(min_taxes == taxes_paid)]
lm(optimal ~ salary + donation_frac )
lm(optimal ~ salary + donation_frac, data = result_dt )
result_dt[, average(optimal)]
result_dt[, mean(optimal)]
lm(bunch ~ salary + donation_frac, data = result_dt )
lm(taxes_paid ~ salary + donation_frac + bunch, data = result_dt )
lm(taxes_paid ~ salary + donation_frac + factor(bunch), data = result_dt )
summary(lm)
summary(reg_result)
reg_result <- lm(taxes_paid ~ salary + donation_frac + factor(bunch), data = result_dt )
summary(reg_result)
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, 1e3), donation_frac = seq(.01, .3, .01))
full_results <- pmap_dbl(full_options, calc_lifetime_tax_by_bunch)
reg_result <- lm(taxes_paid ~ salary + donation_frac + factor(bunch), data = result_dt )
summary(reg_result)
library(data.table)
library(tidyverse)
library(ggthemes)
# Define tax brackets and rates for single filers
brackets <- c(11000, 44725, 95375, 182100, 231250, 578125)
rates <- c(0.10, 0.12, 0.22, 0.24, .32, .35)
# Function to calculate tax based on taxable income
calculate_tax <- function(income) {
tax <- 0
for (i in seq_along(brackets)) {
if (income > brackets[i]) {
tax <- tax + (brackets[i] - ifelse(i == 1, 0, brackets[i-1])) * rates[i]
} else {
tax <- tax + (income - ifelse(i == 1, 0, brackets[i-1])) * rates[i]
break
}
}
return(tax)
}
# calculate_tax(100000)
# Calculate lifetime tax burden
annual_income <- 100000
donation_per_year <- 0.10 * annual_income
standard_deduction <- 12950
# calculate_tax(annual_income - standard_deduction)
# 1. Tax without any donations
tax_no_donation <- calculate_tax(annual_income)
# 2. Tax with annual donations
tax_with_annual_donation <- calculate_tax(annual_income - donation_per_year)
# ...
# ...
calc_lifetime_tax_by_bunch <- function(bunch, salary, donation_frac) {
lifetime_years <- 40
total_taxes_paid <- 0
# total_years_passed <- 0
money_saved <- 0
for (i in 1:lifetime_years) {
if ((i %% bunch == 0) | (i == lifetime_years)) {
# print(i)
# donating year
money_saved <- money_saved + donation_frac * salary
total_taxes_paid <- total_taxes_paid + calculate_tax(salary - max(money_saved, standard_deduction))
money_saved <- 0
} else {
# saving year
money_saved <- money_saved + donation_frac * salary
total_taxes_paid <- total_taxes_paid + calculate_tax(salary - standard_deduction)
}
}
return(total_taxes_paid)
}
full_options <- CJ(bunch = 1:10, salary = seq(.5e5, 3e5, 1e3), donation_frac = seq(.01, .3, .01))
full_results <- pmap_dbl(full_options, calc_lifetime_tax_by_bunch)
result_dt <- copy(full_options)
result_dt[, taxes_paid := full_results]
result_dt[, min_taxes := min(taxes_paid), .(salary, donation_frac)]
result_dt[, optimal := as.numeric(min_taxes == taxes_paid)]
result_dt[donation_frac == .1 & salary == 3e5] %>%
ggplot(aes(x = bunch, y = taxes_paid / 1e3)) +
geom_point() +
# geom_boxplot() +
# geom_tufteboxplot() +
scale_x_continuous(breaks = 1:10) +
labs(x = "Years of bunching",
y = "Thousands of $",
title = "Lifetime taxes paid under different bunching scenarios",
caption = "Salary = $300k\nYears earning = 40\nDonation = 10%") +
# scale_y_tuf
# scale_y_continuous(breaks = seq(520, 600, 20),
#                    limits = c(520, 600)) +
theme_tufte() +
theme(plot.background = element_rect(fill = "white"))
